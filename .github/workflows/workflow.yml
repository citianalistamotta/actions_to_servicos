name: Run Histórico

on:
  workflow_dispatch:
  schedule:
    - cron: "0 12 * * *"  # todo dia às 12h UTC

jobs:
  run-historico:
    runs-on: ubuntu-latest

    env:
      DB_SERVER: "localhost"
      DB_PORT: "1433"
      DB_NAME: "HistoricoDB"
      DB_USER: "sa"
      DB_PASS: "Str0ngP@ssw0rd!"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Instalar dependências do sistema
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg apt-transport-https

      - name: Configurar repositório Microsoft
        run: |
          curl -fsSL https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
          DISTRO=$(lsb_release -is | tr '[:upper:]' '[:lower:]')
          CODENAME=$(lsb_release -cs)
          echo "deb [arch=amd64] https://packages.microsoft.com/${DISTRO}/${CODENAME}/prod ${CODENAME} main" | sudo tee /etc/apt/sources.list.d/microsoft.list
          sudo apt-get update

      - name: Instalar SQL Server
        run: |
          sudo ACCEPT_EULA=Y apt-get install -y mssql-server
          # Configurar o SQL Server (não interativo)
          sudo /opt/mssql/bin/mssql-conf setup accept-eula=Y sa-password="${{ env.DB_PASS }}" <<EOF
        # Nessa etapa, normalmente é preciso passar parâmetros, mas como se trata de uma instalação automática
        # podemos usar o comando 'setup' com modo silencioso, dependendo do Ubuntu.
        # Como alternativa, faremos uma instalação inicial básica e iniciamos o serviço.
          
      - name: Iniciar o serviço do SQL Server
        run: |
          sudo systemctl start mssql-server
          sleep 20 # esperar o SQL Server subir

      - name: Instalar ferramentas SQL
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc
          sudo curl -fsSL https://packages.microsoft.com/config/ubuntu/22.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> $GITHUB_ENV
          source ~/.bashrc

      - name: Aguarde o SQL Server ficar pronto
        run: |
          for i in {1..30}; do
            /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${{ env.DB_PASS }}" -Q "SELECT 1" && break
            echo "Aguardando SQL Server iniciar ($i/30)..."
            sleep 2
          done

      - name: Criar banco de dados
        run: |
          /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${{ env.DB_PASS }}" -Q "IF DB_ID('${{ env.DB_NAME }}') IS NULL CREATE DATABASE [${{ env.DB_NAME }}];"

      - name: Executar schema.sql
        run: |
          if [ -f "schema.sql" ]; then
            echo "Executando schema.sql..."
            /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${{ env.DB_PASS }}" -d "${{ env.DB_NAME }}" -i schema.sql
          else
            echo "schema.sql não encontrado, pulando..."
          fi

      - name: Rodar seu código
        run: |
          pip install -r requirements.txt
          pip install pymssql
          python main.py

