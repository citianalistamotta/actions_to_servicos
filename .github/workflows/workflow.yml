name: Run Historico

on:
  workflow_dispatch:
  schedule:
    - cron: "0 12 * * *" # todo dia às 12h UTC (~09h Brasília)

jobs:
  run-historico:
    runs-on: ubuntu-latest

    env:
      DB_SERVER: "localhost,1433"
      DB_NAME: "HistoricoDB"
      DB_USER: "sa"
      DB_PASS: "Str0ngP@ssw0rd!" # A senha DEVE ser forte

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # 1. Instala e inicia o SQL Server (NOME CORRIGIDO)
      - name: Start SQL Server
        uses: Yawn-Sean/setup-sql-server@v1
        with:
          sql-server-version: "2022-latest"
          sa-password: ${{ env.DB_PASS }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 2. Instala as dependências de sistema e do Python
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y freetds-dev unixodbc-dev
          pip install -r requirements.txt
          pip install pymssql

      # 3. Adiciona as ferramentas do SQL Server ao PATH
      - name: Add SQLCMD to PATH
        run: echo "/opt/mssql-tools/bin" >> $GITHUB_PATH

      # 4. Cria o banco de dados
      - name: Create Database
        # Espera um pouco para garantir que o SQL Server esteja 100% online
        run: |
          sleep 15s 
          sqlcmd -S localhost -U sa -P "${{ env.DB_PASS }}" -Q "CREATE DATABASE [${{ env.DB_NAME }}];"

      # 5. Popula o banco com tabelas e dados
      - name: Populate Database from schema.sql
        run: |
          if [ -f "schema.sql" ]; then
            echo "Arquivo schema.sql encontrado. Executando..."
            sqlcmd -S localhost -U sa -P "${{ env.DB_PASS }}" -d "${{ env.DB_NAME }}" -i schema.sql
          else
            echo "AVISO: Arquivo schema.sql não encontrado. O script principal pode falhar se as tabelas não existirem."
          fi
          
      # 6. Roda o seu script principal
      - name: Run Historico
        run: python main.py

